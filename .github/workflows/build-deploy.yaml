name: Build and Deploy Code

on:
  push:
    branches:
      - actions
  pull_request:
    branches:
      - actions
  workflow_dispatch:

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.13.1, 3.11, 3.12]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install Ruff
  #       run: pip install ruff

  #     - name: Run Ruff Linter
  #       run: ruff check . 
  # test:
  #   needs: lint
  #   environment: 
  #      name: dev 
  #   env:
  #     DB_NAME: ${{ secrets.DB_NAME }}
  #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  #     DB_PORT: ${{ secrets.DB_PORT }}
  #     DB_HOST: ${{ secrets.DB_HOST }}
  #     DB_USER: ${{ secrets.DB_USER }}
  #     TABLE_NAME: ${{ secrets.TABLE_NAME }}
  #     SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #     ALGORITHM: ${{ secrets.ALGORITHM }}
  #     ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}  
    
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.13.1, 3.11, 3.12]
  #   services:
  #     postgres:
  #       image: postgres:16
  #       ports:
  #         - 5432:5432
  #       env:
  #         POSTGRES_DB: ${{ secrets.DB_NAME }}_test
  #         POSTGRES_USER: ${{ secrets.DB_USER }}
  #         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Display Python Version
  #       run: python -c "import sys; print(sys.version)"

  #     - name: Cache pip
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip setuptools wheel
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov

  #     - name: Create test results directory
  #       run: mkdir -p junit
  #     - name: Run tests
  #       run: |
  #         pytest tests/ \
  #         --junitxml=junit/test-results-${{ matrix.python-version }}.xml \
  #         --cov=app \
  #         --cov-report=xml \
  #         --cov-report=html
      
  #     - name: Upload coverage report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report-${{ matrix.python-version }}
  #         path: junit/test-results-${{ matrix.python-version }}.xml

  # build-docker:
  #   needs: test
  #   environment: 
  #      name: dev
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.13.1, 3.11, 3.12]
    
  #   steps: 
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:${{ matrix.python-version }}
  #         cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:cache
  #         cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:cache,mode=max

  deploy-to-heroku:
    # needs: build-docker
    environment: 
       name: prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          echo "heroku" >> $GITHUB_PATH
        
      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.14.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

      # - name: Restart Heroku app
      #   run: |
      #     heroku ps:restart --app ${{ secrets.HEROKU_APP_NAME }}